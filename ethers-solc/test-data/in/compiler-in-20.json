{"language":"Solidity","sources":{"contracts/AmbiguousLibrary.sol":{"content":"pragma solidity >0.5.0;\n\nimport { AmbiguousLibrary as AmbiguousLibrary2 } from \"./AmbiguousLibrary2.sol\";\n\nlibrary AmbiguousLibrary {\n    function libDo(uint256 n) external returns (uint256) {\n        return n * 2;\n    }\n}\n\ncontract TestAmbiguousLib {\n    function printNumber(uint256 amount) public returns (uint256) {\n        uint result = AmbiguousLibrary.libDo(amount);\n        result = AmbiguousLibrary2.libDo(result);\n        return result;\n    }\n}\n"},"contracts/AmbiguousLibrary2.sol":{"content":"pragma solidity >0.5.0;\n\nlibrary AmbiguousLibrary {\n    function libDo(uint256 n) external returns (uint256) {\n        return n * 2;\n    }\n}\n"},"contracts/Greeter.sol":{"content":"pragma solidity >0.5.1;\n\ncontract Greeter {\n\n    string greeting;\n\n    event GreetingUpdated(string greeting);\n\n    constructor() public {\n        greeting = \"Hi\";\n    }\n\n    function setGreeting(string memory _greeting) public {\n        greeting = _greeting;\n        emit GreetingUpdated(_greeting);\n    }\n\n    function greet() public view returns (string memory) {\n        return greeting;\n    }\n\n}\n"},"contracts/IGreeter.sol":{"content":"pragma solidity >0.5.1;\n\ninterface IGreeter {\n    function greet() external view returns (string memory);\n}"},"contracts/NonUniqueLibrary.sol":{"content":"pragma solidity >0.5.0;\n\nlibrary NonUniqueLibrary {\n    function libDo(uint256 n) external returns (uint256) {\n        return n * 2;\n    }\n}\n"},"contracts/TestContractLib.sol":{"content":"pragma solidity >0.5.0;\n\nlibrary TestLibrary {\n    function libDo(uint256 n) external returns (uint256) {\n        return n * 2;\n    }\n}\n\ncontract TestContractLib {\n\n    function printNumber(uint256 amount) public returns (uint256) {\n        uint result = TestLibrary.libDo(amount);\n        return result;\n    }\n}\n"},"contracts/TestNonUniqueLib.sol":{"content":"pragma solidity >0.5.0;\n\nlibrary NonUniqueLibrary {\n    function libDo(uint256 n) external returns (uint256) {\n        return n * 2;\n    }\n}\n\ncontract TestNonUniqueLib {\n\n    function printNumber(uint256 amount) public returns (uint256) {\n        uint result = NonUniqueLibrary.libDo(amount);\n        return result;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers"],"":["ast"]}}}}
