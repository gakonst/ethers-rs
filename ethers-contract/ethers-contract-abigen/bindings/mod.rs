#![allow(clippy::all)]
//! This module contains abigen! generated bindings for solidity contracts.
//! This is autogenerated code.
//! Do not manually edit these files.
//! This file may be overwritten by the codegen system at any time.
pub use greeter_mod::*;
#[allow(clippy::too_many_arguments)]
mod greeter_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers_contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers_core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers_providers::Middleware;
    #[doc = "Greeter was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static GREETER_ABI: ethers_contract::Lazy<ethers_core::abi::Abi> =
        ethers_contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"struct Greeter.Stuff\",\"name\":\"stuff\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"struct Greeter.Inner\",\"name\":\"inner\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\",\"components\":[]}]}]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"greet\",\"outputs\":[{\"internalType\":\"struct Greeter.Stuff\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"struct Greeter.Inner\",\"name\":\"inner\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\",\"components\":[]}]}]}]}]") . expect ("invalid abi")
        });
    #[derive(Clone)]
    pub struct Greeter<M>(ethers_contract::Contract<M>);
    impl<M> std::ops::Deref for Greeter<M> {
        type Target = ethers_contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers_providers::Middleware> std::fmt::Debug for Greeter<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(Greeter)).field(&self.address()).finish()
        }
    }
    impl<'a, M: ethers_providers::Middleware> Greeter<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers_core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            let contract =
                ethers_contract::Contract::new(address.into(), GREETER_ABI.clone(), client);
            Self(contract)
        }
        #[doc = "Calls the contract's `greet` (0x8ed3bc56) function"]
        pub fn greet(&self, stuff: Stuff) -> ethers_contract::builders::ContractCall<M, Stuff> {
            self.0
                .method_hash([142, 211, 188, 86], (stuff,))
                .expect("method not found (this should never happen)")
        }
    }
    #[doc = "Container type for all input parameters for the `greet`function with signature `greet(((bool)))` and selector `[142, 211, 188, 86]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers_contract :: EthCall,
        ethers_contract :: EthDisplay,
    )]
    #[ethcall(name = "greet", abi = "greet(((bool)))")]
    pub struct GreetCall {
        pub stuff: Stuff,
    }
    #[doc = "`Inner(bool)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers_contract :: EthAbiType,
        ethers_contract :: EthAbiCodec,
    )]
    pub struct Inner {
        pub a: bool,
    }
    #[doc = "`Stuff((bool))`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers_contract :: EthAbiType,
        ethers_contract :: EthAbiCodec,
    )]
    pub struct Stuff {
        pub inner: Inner,
    }
}
